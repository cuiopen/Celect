#ifndef GSGENERAL_H
#define GSGENERAL_H

enum ConversionResult ConvertUTF16toUTF32(unsigned short const * *,unsigned short const *,unsigned long * *,unsigned long *,enum ConversionFlags);
enum ConversionResult ConvertUTF16toUTF8(unsigned short const * *,unsigned short const *,unsigned char * *,unsigned char *,enum ConversionFlags);
enum ConversionResult ConvertUTF32toUTF8(unsigned long const * *,unsigned long const *,unsigned char * *,unsigned char *,enum ConversionFlags);
enum ConversionResult ConvertUTF8toUTF16(unsigned char const * *,unsigned char const *,unsigned short * *,unsigned short *,enum ConversionFlags);
enum ConversionResult ConvertUTF8toUTF32(unsigned char const * *,unsigned char const *,unsigned long * *,unsigned long *,enum ConversionFlags);
void ReInitCrashHandler(void);
struct GSThread * __gsStartThread(int (*)(void *),void *,char const *);
void __gsThrowException(char const *,...);
void __gsThrowException_SetInfos(char const *,char const *,int,struct GSExceptionInfo *);
void * _gsAlloc(unsigned int);
void * _gsAllocData(unsigned int);
void * _gsAllocDataNonCollectable(int);
void * _gsAllocNonCollectable(unsigned int);
unsigned int volatile * volatile _gsCurrentTicksPtr;
unsigned __int64 volatile * volatile _gsCurrentTimeMsPtr;
__int64 volatile * volatile _gsCurrentTimePtr;
unsigned __int64 _gsGetTimeInMs(void);
void * _gsRealloc(void *,int);
void _gsRecordCrashCheckPointInt(char const *,int,int);
void _gsRecordCrashCheckPointString(char const *,int,char const *);
unsigned int _gsRecordDataAlloced(unsigned int,char const *,int);
unsigned int _gsRecordSysAlloced(unsigned int,char const *,int);
int _gsScheduleJobSetJobName(char const *,int);
void _gsSetAllocCallingSiteAddInfo(char const *);
bool _gsTickTimeInitialised;
void _sys_free(void *);
void * _sys_malloc(unsigned int);
void * _sys_realloc(void *,unsigned int);
struct SocketInfo acceptNewConnection(int);
char const * addrtoa_ip4(int);
int atoaddr_ip4(char const *);
int blockDecrypt(struct cipherInstance *,struct keyInstance *,unsigned char *,int,unsigned char *);
int blockEncrypt(struct cipherInstance *,struct keyInstance *,unsigned char *,int,unsigned char *);
int cipherInit(struct cipherInstance *,unsigned char,char *);
struct SocketInfo connectToServer(char const *,int);
struct SocketInfo connectToServer(char const *,int,int);
void dumpCurrentStack(void);
char * dumpCurrentStackShort(void);
void dumpNextGCRemainingTypedObjects(void);
void dumpTypedGCAllocators(void);
void dumpbytes(char const *,int,int,char const *);
void enterDebugger(char const *);
char * gatherCurrentStackShort(void);
char * gatherSpecifiedStackShort(int *,int *);
char const * getFirstMethodOnStackNotContainingFilter(char const *);
int getLastSocketErrno(void);
char const * getLocalIp(void);
char const * getMethodAtAddress(void *);
int getSizeOfPointer(void *);
int getSocketStatsRecvBytes(void);
int getSocketStatsSendBytes(void);
void gsAddMemoryWriteWatch(unsigned int *);
bool gsAreJobsUsingThreads(void);
bool gsBase64Decode(char const *,class GSBlobBuffer *);
char * gsBinaryBlobToHexString(void *,int);
void gsCheckMemoryWriteWatches(void);
struct IGSFile * gsCreateNativeFileAccess(void);
void gsDebuggerBreak(char const *,...);
void gsDumpDataAllocInfos(void);
void gsExceptionCleanupTry(void *);
enum GSExceptionMode (*gsExceptionSetupTry(void))(void *);
bool gsExistsFile(char const *);
void gsForceGC(void);
int gsFork(void);
void gsFree(void *);
void * gsGCFindHeader(void *);
char const * gsGetCachedFileInfos(void);
struct GSClassReflectionResolver * gsGetClassReflectionResolver(void);
struct CrashCheckPointEntry * gsGetCrashCheckPointArray(void);
unsigned int * gsGetCrashCheckPointArrayPtr(void);
struct GSExceptionInfo * gsGetCurrentExceptionInfo(void);
int * gsGetCurrentMethodPC(void *,void * *);
unsigned __int64 gsGetFileSize(char const *);
unsigned __int64 gsGetFreeDiskspaceInMB(char const *);
class GSHandleResolver * gsGetHandleResolver(void);
int gsGetLastGCDuration(void);
__int64 gsGetLastGCTime(void);
char const * gsGetLogFileName(void);
int gsGetProcessId(void);
char const * gsGetScreenshotsDirectoryBase(void);
unsigned int gsGetSystemCPUCoreCount(void);
int gsGetThreadsCount(void);
struct GSTransactionMonitor * gsGetTransactionMonitor(void);
char const * gsGetUniqueProcessId(void);
char const * gsGetWriteDirectoryBase(void);
void gsInit(void);
bool gsIsGCNeeded(void);
bool gsIsMainThread(void);
bool gsIsWow64(void);
void gsLogAssertFail(char const *,...);
void gsLogCustomLevel(char const *,char const *);
void gsLogDebug(char const *,...);
void gsLogError(char const *,...);
void gsLogException(char const *);
void gsLogInfo(char const *,...);
void gsLogWarn(char const *,...);
void gsMakeDir(char const *);
//struct GSStringMap<char const *> * gsParseLinuxProcFile(char const *);
void gsPerformGCIfNeeded(void);
void gsRegisterExplicitRoot(void *,int);
void gsRegisterFinaliser(void *,void (*)(void *,void *),void *);
void gsRegisterGCCollectionFinishListener(struct GSGCCollectionFinishListener *);
void gsRegisterHeapValidationFunction(void (*)(void));
void gsRemoveDirectory(char const *);
void gsRemoveFile(char const *);
void gsReportXmlError(void *,char const *,...);
void gsSetAllocCallingSite(char const *,int);
void gsSetCachedFileInfos(char const *);
void gsSetClassReflectionResolver(struct GSClassReflectionResolver *);
void gsSetCurrentThreadPriority(enum GSThreadPriority);
void gsSetHandleResolver(class GSHandleResolver *);
void gsSetTransactionMonitor(struct GSTransactionMonitor *);
void gsUnregisterExplicitRoot(void *);
void gsValidateHeapStatus_internal(void);
void gs_impl__string_checkmem(void);
char const * gs_replaceplaceholder(char const *,char const *);
void gs_settranslation(char const *);
void gs_string_free(void *);
unsigned int gs_string_livecount(void);
unsigned int gs_string_livemem(void);
void * gs_string_malloc(unsigned int);
unsigned int gs_string_overallcount(void);
unsigned int gs_string_overallmem(void);
char const * gs_translate(char const *,char const *);
char const * gs_translate(char const *);
void initSockets(void);
void invalidateBadReadPointerInfo(void);
bool isBadReadPointer(void const *,int);
unsigned char isLegalUTF8Sequence(unsigned char const *,unsigned char const *);
int makeKey(struct keyInstance *,unsigned char,int,char *);
int openListenSocket(int,int,char const *);
int padDecrypt(struct cipherInstance *,struct keyInstance *,unsigned char *,int,unsigned char *);
int padEncrypt(struct cipherInstance *,struct keyInstance *,unsigned char *,int,unsigned char *);
void profiler_afterfork(void);
void profiler_preparefork(void);
int readSocketBytes(int,char *,int);
bool readSocketBytesBlocking(int,char *,int);
bool readSocketLineBlocking(int,char *,int);
void recordAllocSize(unsigned int,void *);
void recordPointerToSize(void *,int);
void setLastAllocOperation(char);
void setLocalIp(char const *);
void setLogInfos(char const *,char const *,int);
void setSocketCork(int,bool);
void setSocketNonBlocking(int,bool);
void setupCrashHandler(void);
void shutdownGC(void);
void shutdownSocket(int);
void shutdownSockets(void);
int sys_current_mallocmem(void);
int sys_total_mallocmem(void);
void updateBadReadPointerInfo(void);
void watchDogPoint(void);
void win32WorkARoundCrashHandler(void *);
int writeSocketBytes(int,char const *,int);
bool writeSocketBytesBlocking(int,char const *,int);

#endif